#include <iostream>
#include <fstream>
#include <stdio.h>
#include <stdlib.h>
#include <cmath>
#include "fftw3.h"
#include "TObject.h"
#include "TCanvas.h"
#include "TH2.h"
#include "TGraph.h"
#include "TArc.h"
#include "TLine.h"
#include "TText.h"
#include "TGraphErrors.h"
#include "TApplication.h"
#include "TROOT.h"
#include "TPostScript.h"
#include "TStyle.h"
#include "TMinuit.h"
#include "TMarker.h"
#include "TText.h"
#include "TFile.h"
#include "TNtuple.h"
#include "TRandom.h"

using namespace std;

int main(int argc, char* argv[])
{
  TApplication theApp("App",&argc,argv);
  TROOT rsession("test", "test");

  TString cardname = theApp.Argv(1);
  char cdummy[1000];

  TString runname = cardname+TString(".run"); 
  
  //open run file
  ifstream runfile;
  runfile.open(runname.Data());
  runfile.getline(cdummy,1000); //read and discard header line
  int repeat;
  double xi,yi,zi,ekin,thetai,phii,mass,charge;

  double x,y,z,r,ep,ek,epar,eperp,egain,eloss,b,phi,t,scatt,wq;

  int i=1;
  //for each line of runfile we expect a track 
  TString rootname = cardname+TString(".root");
  TFile* tfout = new TFile(rootname,"recreate");

  cout << "ready to run" << endl;
  while (runfile >> repeat >> xi >> yi >> zi >> ekin >> thetai >> phii >> mass >> charge)
    {
      cout << "running  " << i << endl;
      TString trackname = cardname+TString(".track");
      trackname += i;
      ifstream trackfile;
      trackfile.open(trackname.Data());
      
      int N=10000000;

      //initialize fft
      double *in, *xin;
      fftw_complex  *out;
      fftw_plan p;
      in = (double*) fftw_malloc(sizeof(double) * N);
      xin = (double*) fftw_malloc(sizeof(double) * N);
/*       phiin = (double*) fftw_malloc(sizeof(double) * N); */
/*       xphi = (double*) fftw_malloc(sizeof(double) * N); */
      out = (fftw_complex*) fftw_malloc(sizeof(fftw_complex) * N);

      //      initialize output

      double lastphi=0;
      double lastt=0;
      long int it = 0;
      double tstep = 1e-12*1e6;
      double thist = it*tstep; 
      double thisphi, dphidt;
      double thisx, dxdt;
      double lastx = 0;
      //In this loop we will take steps of length tstep (generated by it loop) and read lines of the track-report file whenever we need to.
      thisphi=0;
      thisx = 0;
      int iline=0;
      while (trackfile >>  x >> y >> z >> r >> ep >> ek >> epar >> eperp >> egain >> eloss >> b >> phi >> t >> scatt >> wq)
	{
	  iline++;
	  dphidt = (phi-lastphi)/(t-lastt);
	  dxdt = (x - lastx)/(t-lastt);
	  while (thist < t)
	    {
	      thisphi = lastphi + dphidt*(thist-lastt);	      
	      thisx = lastx + dxdt*(thist-lastt);
	      in[it] = cos(thisphi);
	      xin[it] = thisx;
	      //	      phiin[it] = phi;
	      //	      xphi[it] = x;
	      thist = it*tstep;
	      it++;
	      if (it >= N) break;
	    }
	  if (it >= N) break;
	  lastt = t;
	  lastphi = thisphi;
	  lastx = thisx;
	}
      cout << "done making time series at iline " << iline << " t=" << thist <<endl;

      p = fftw_plan_dft_r2c_1d(TMath::Min(Long_t(N),it), in, out, FFTW_ESTIMATE);
      cout << "executing " << i << endl; 

      fftw_execute(p); 

      cout << "done fft" << i << endl; 
      trackfile.close();


      cout << "prepare ntuple " << i << " " << N << " " << it << endl; 
      TString ntname=cardname+TString("_");
      ntname+=i;
      TNtuple* nt = new TNtuple(ntname,ntname,"t:m:in:x");
      for (int j=0;j<TMath::Min(Long_t(N),it);j++)
	{
	  nt->Fill(j*tstep,sqrt(pow(out[0][j],2)+pow(out[1][j],2)),in[j],xin[j]);
	  
	}
      nt->Write();
      cout << "done w/ loop " << i << endl;

      cout << "freeing " << i << endl; 
      fftw_destroy_plan(p);
      fftw_free(in); 
      fftw_free(xin); 
      fftw_free(out);


      i++;
    }
  tfout->Close();
  
}
